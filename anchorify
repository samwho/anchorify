#!/usr/bin/env ruby

# If no file name is passed, fail and exit.
if ARGV.length < 1
  puts "Error: You must pass a parameter."
  Process.exit
end

########################################################################
# FUNCTION DEFINITIONS                                                 #
#======================================================================#

# Generates a tab.
def tab width = 4
  "&nbsp;" * width
end

# Converts a title into a slug by downcasing it and converting spaces
# to hyphens.
def slugify string
  strip_tags(string).downcase.gsub(' ', '-')
end

# Takes the match array, which is of format ["2", "Heading"] where
# the "2" is the h level (e.g. <h2>) and "Heading" is the content
# between the <h> tags, and constructs it into the new, anchored
# heading.
def new_heading match
  "<h#{match[:level]} id=\"#{match[:slug]}\">#{match[:title]}</h#{match[:level]}>"
end

# Strips all HTML tags from a string. Snippet courtesy of:
# http://codesnippets.joyent.com/posts/show/615
def strip_tags string
  string.gsub(/<\/?[^>]*>/, "")
end

# Reconstructs the original heading from the match.
def old_heading match
  if match[:had_slug?]
    "<h#{match[:level]} id=\"#{match[:slug]}\">#{match[:title]}</h#{match[:level]}>"
  else
    "<h#{match[:level]}>#{match[:title]}</h#{match[:level]}>"
  end
end

# Creates an anchor for the title match. This anchor goes in the
# table of contents and will link to the title of the match you
# supply as an argument.
def anchor match
  "<a href=\"\##{match[:slug]}\">#{strip_tags match[:title]}</a>"
end

# Generates a table of contents based on an array of matches. Format
# is explained in docstring for new_heading.
def generate_toc matches
  matches.inject("<toc>\n") do |memo, match|
    memo += "#{tab * (match[:level].to_i - 1)}#{anchor(match)}<br />\n"
  end + '</toc>'
end

# Scans some HTML and returns an array of hashes that represent heading
# matches. A heading match looks like this:
#
# HTML:
# <h1>Hello, world!</h1>
#
# Hash:
#
# {
#   :title     => 'Hello, world!',
#   :level     => '1',
#   :slug      => 'hello,-world!',
#   :had_slug? => false
# }
def get_headings html
  matches = html.scan(/<h([1-6])(?:\s+.*id=(?:"|')(.+)(?:"|'))?>(.+?)<\/h\1>/)
  matches.map do |match|
    {
      :level => match[0],
      :slug => match[1] || slugify(match[2]),
      :title => match[2],
      :had_slug? => (not match[1].nil?)
    }
  end
end

# Reads in a file_name and outputs that file's contents.
def read_file file_name
  File.open(file_name) { |file| file.readlines.join }
rescue
  nil
end

####################################################################
# SCRIPT STARTS HERE                                               #
#==================================================================#

# Read in file from ARGV[0], or if an error is thrown use the passed parameter
# as input.
input = read_file(ARGV[0]) || ARGV[0]

# Get the headings for the file.
headings = get_headings(input)

# Loop over the headings, replacing them with the new anchored headings
headings.each do |match|
  input = input.sub(old_heading(match), new_heading(match))
end

# Generate a table of contents and replace the <toc> tag with it.
input = input.sub(/<toc\s*(:?\/)?>(?:.+<\/toc>)?/m, generate_toc(headings))

# Output the contents.
print input
